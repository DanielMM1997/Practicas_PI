const int LEE_SCL = 2;
 // puerto de entrada para leer el estado de la l?nea SCL 
const int LEE_SDA = 3;
 // puerto de entrada para leer el estado de la l?nea SDA 
const int ESC_SCL = 4;
 // puerto de salida para escribir el valor de la l?nea SCL 
const int ESC_SDA = 5;
 // puerto de salida para escribir el valor de la l?nea SDA 

void START(){ 
	digitalWrite(ESC_SDA, HIGH);
 
	digitalWrite(ESC_SCL, HIGH);
 // Esperar a que SDA, SCL = 1,1 
	while(digitalRead(LEE_SDA) != HIGH || digitalRead(LEE_SCL) != HIGH);
 
	digitalWrite(ESC_SDA, LOW);
 
	digitalWrite(ESC_SCL, HIGH);
 
	digitalWrite(ESC_SDA, LOW);
 
	digitalWrite(ESC_SCL, LOW);
 
}
 

void STOP(){ 
digitalWrite(ESC_SDA, LOW);

digitalWrite(ESC_SCL, LOW);

digitalWrite(ESC_SDA, LOW);
 
digitalWrite(ESC_SCL, HIGH);
 
digitalWrite(ESC_SDA, HIGH);
 
digitalWrite(ESC_SCL, HIGH);
 
digitalWrite(ESC_SDA, HIGH);
 
digitalWrite(ESC_SCL, HIGH);
 
}
 
void E_BIT_1(){ 
digitalWrite(ESC_SDA, HIGH);
 
digitalWrite(ESC_SCL, LOW);
 
digitalWrite(ESC_SDA, HIGH);
 
digitalWrite(ESC_SCL, HIGH);
 
digitalWrite(ESC_SDA, HIGH);
 
digitalWrite(ESC_SCL, HIGH);
 
digitalWrite(ESC_SDA, HIGH);
 
digitalWrite(ESC_SCL, LOW);
 
}
 
void E_BIT_0(){ 
digitalWrite(ESC_SDA, LOW);
 
digitalWrite(ESC_SCL, LOW);
 
digitalWrite(ESC_SDA, LOW);
 
digitalWrite(ESC_SCL, HIGH);

digitalWrite(ESC_SDA, LOW);
 
digitalWrite(ESC_SCL, HIGH);
 
digitalWrite(ESC_SDA, LOW);
 
digitalWrite(ESC_SCL, LOW);
 
}


int R_BIT(){ 
digitalWrite(ESC_SDA, HIGH);
 
digitalWrite(ESC_SCL, LOW);
 
digitalWrite(ESC_SDA, HIGH);
 
digitalWrite(ESC_SCL, HIGH);
 // Esperar a que SCL = 1 
while(digitalRead(LEE_SCL) != HIGH);
 
int res = digitalRead(LEE_SDA);
 
digitalWrite(ESC_SDA, HIGH);
 
digitalWrite(ESC_SCL, LOW);
 
return res;
 
}
 
// Direccion de la memoria M24C01 
void DEVICE(){ 
E_BIT_1();
 
E_BIT_0();
 
E_BIT_1();
 
E_BIT_0();
 
E_BIT_0();
 
E_BIT_0();
 
E_BIT_0();
 
}
 
// Metodo que pasa a bits el dato pasado por parametro 
void toEBIT(byte dato){ 
for(int i = 7;
 i >= 0;
 i--){ 
if (bitRead(dato,i) == 1){ 
E_BIT_1();
 
}
else{ 
E_BIT_0();
 
}
 
}
 
}
 
 
// Metodo que lee los bits y pasa a byte 
byte readByte(){ 
byte dato = 0;
 for(int i = 7; i >= 0; i--){ 
	bitWrite(dato,i,R_BIT());
 }
 return dato;
 }

 // Metodo para escribir 1 byte en una posici?n de memoria 
void ByteWrite(byte dir, byte data){ 
aqui: 
START();
 // Empezamos 
DEVICE();
 // Direccion dispositivo 
E_BIT_0();
 // WRITE 
if (R_BIT() != 0) 
goto aqui;
 // ACK // Enviamos direccion 
toEBIT(dir);
 // Esperamos ACK 
while(R_BIT() != 0);
 // Enviamos byte 
toEBIT(data);
 //toEbit // Esperamos ACK 
while(R_BIT() != 0);
 STOP();
 //Fin operacion }

// Metodo para escribir 8 bytes en memoria 
void PageWrite(byte dir, byte data){ 
aqui2: 
START();
 // Empezamos 
DEVICE();
 // Direccion dispositivo 
E_BIT_0();
 // WRITE 
if (R_BIT() != 0) goto aqui2;
 // ACK //Enviamos direccion 
toEBIT(dir);
 // Esperamos ACK 
while(R_BIT() != 0);
 //Enviamos 8 bytes 
for(int i = 0; i<8; i++){ 
toEBIT(data);
 // Esperamos ACK 
while(R_BIT() != 0);
 }
 STOP();
 }
 // Metodo para leer en una posicion de memoria byte 
RANDOM_ADDRESS_READ(byte dir){ 
aqui1: 
START();
 // Empezamos 
DEVICE();
 // Direccion dispositivo 
E_BIT_0();
 // WRITE 
if(R_BIT() != 0) 
goto aqui1;
 //ACK // Enviamos direccion 
toEBIT(dir);
 // Esperamos ACK 
while(R_BIT() != 0);
 START();
 // Empezamos de nuevo 
DEVICE();
 // Direccion dispositivo 
E_BIT_1();
 // LECTURA 
if (R_BIT() != 0) 
goto aqui1;
 // Leemos el byte 
byte res = readByte();
 if(R_BIT() != 1) 
goto aqui1;
 E_BIT_1();
 //NO ACK 
STOP();
 // Fin operacion // Devolvemos el byte return res;
 }
 byte SEQUENTIAL_RANDOM_READ(byte dir){ 
again: 
START();
 // Empezamos 
DEVICE();
 // Direccion dispositivo 
E_BIT_0();
 // WRITE 
if (R_BIT() != 0) 
goto again;
 //ACK // ENVIAMOS DIRECCION 
toEBIT(dir);
 // Esperamos ACK 
while(R_BIT() != 0);
 again2: 
START();
 // Empezamos de nuevo 
DEVICE();
 // Direccion dispositivo 
E_BIT_1();
 // READ 
if (R_BIT() != 0) 
goto again2;
 //ACK
int l = 0;
 // Imprimir toda la memoria 
for(i eada= 0; i < 128; i++){ 
Serial.print(readByte(), HEX);
 Serial.print("? "?;
 E_BIT_0();
 l++;
 if (l == 8) { 
Serial.print("?n"?;
 l = 0;
 }
 }
 E_BIT_1();
 // NO ACK STOP();
 // Fin o eadal ?n}
 // Metodo que llena toda la memoria con ByteWrite 
void fillAllByte(int n){ 
byte num = byte(n);
 // Pasamos a byte el num introducido 
for(int i = 0; i < 128;i++){ 
// Recorremos toda la memoria 
ByteWrite(byte(i),num);
 // enviamos dir y byte a ByteWrite 
}
 }
 // Metodo que llena toda la memoria con PageWrite 
void fillAllPage(int n){ 
byte num = byte(n);
 // Pasamos a byte el num introducido 
for (int i = 0; i < 16; i++) { 
// Recorremos toda la memoria 
PageWrite(byte(i*8), byte(num));
 // Enviamos dir y byte a PageWrite 
}
 }
 // Metodo que imprime por pantalla los datos guardados en memoria 
void readAll(){ 
for(int j = 0; j < 16; j++){ 
for(i eada= 0; i < 8; i++){ 
Serial.print(RANDOM_ADDRESS_READ(i*8), HEX);
 Serial.print("? "?;
 }
 Serial.print("?n"?;
 }
 }
 // M?todo que devuelve el num introducido a decimal int SerialRead(){ int num = 0;
 int temp;
 while (Serial.available() != 0) { 
temp = Serial.read();
 if (temp < 48 || temp > 57) { 
Serial.print("?!] NUMERO INVALIDO\n"?;
 return -1;
 }
 temp = temp -?48;
 num = num*10 + temp;
 delay (150);
 }
 return num;
 }
 // M?todo para limpiar el buffer 
void clean() { 
while (Serial.available() != 0) { 
Serial.read();
 }
 }

void setup() { // Abre el puerto serie, y le asigna la velocidad de 9600 bps 
Serial.begin(9600);
 // Inicializaci?n de los terminales de entrada 
pinMode(LEE_SDA,INPUT);
 pinMode(LEE_SCL,INPUT);
 // Inicializaci?n de los terminales de salida 
pinMode(ESC_SDA,OUTPUT);
 pinMode(ESC_SCL,OUTPUT);
 // Asegurarse de no intervenir el bus poniendo SDA y SCL a "?"? 
digitalWrite(ESC_SDA,HIGH);
 digitalWrite(ESC_SCL,HIGH);
 }
 void loop() { 
inicio: 
Serial.println("?*******************************************************************************"?;
 Serial.println("?Seleccione una de las siguientes opciones: "?;
 Serial.println("?1. Guardar un dato en cualquier dirrecion de memoria del dispositivo M24C01"?;
 Serial.println("?2. Leer una posicion de memoria del M24C01"?;
 Serial.println("?3. Inicializar toda la memoria del M24C01 a un valor"?;
 Serial.println("?4. Mostrar el contenido de los 128 bytes del M24C01"?;
 Serial.println("?5. Inicializar toda la memoria del M24C01 a un valor (Page Write)"?;
 Serial.println("?6. Mostrar el contenido de los 128 bytes del M24C01 (Sequential Read)"?;
 Serial.println("?*******************************************************************************"?;

 while (Serial.available() == 0);
 // Esperar a que se teclee un dato 
int eleccion = SerialRead();
 // Guardamos el dato 
Serial.println("?as elegido la o eadal "?;
 Serial.println(eleccion);
 Serial.println("?n"?;
 // Error si num < 1 o 6 > num 
if (eleccion < 1 || eleccion > 6) { 
Serial.println("?!? OPCION INCORRECTA\n"?;
 goto inicio;
 }
 int dato;
 // Variable para dato 
int direccion;
 // Variable para 
direccion clean();
 switch (eleccion) { 
// 1. Guardar un dato en cualquier dirrecion de memoria del dispositivo M24C01 
case 1: 
volver1: 
Serial.print("?> Introduzca un dato, es decir, un numero entre 0 y 255 "?;
 while (Serial.available() == 0);
 // Esperamos a que se teclee un dato 
dato = SerialRead();
 // Guardamos el dato 
Serial.println("?ato introducido: "?;
 Serial.println(dato);
 // Si no est? entre 0 y 255 se vuelve a pedir dato 
if (dato < 0 || dato > 255) { 
Serial.println("?!] NUMERO INCORRECTO\n"?;
 goto volver1;
 }
 clean();
 volver2:
Serial.print("?n>> Introduzca una posicion de memoria, es decir, un numero entre 0 y 127 "?;
 while (Serial.available() == 0);
 // Esperamos a que se teclee un dato 
direccion = SerialRead();
 // Guardamos el dato 
Serial.println("?osicion introducida: "?;
 Serial.println(direccion);
 Serial.println("?n"?;
 // Si no est? entre 0 y 128 se vuelve a pedir posicion 
if (direccion < 0 || direccion > 127) { Serial.println("?!? POSICION DE MEMORIA ERRONEA\n"?;
 goto volver2;
 }
 clean();
 ByteWrite(direccion, dato);
 // Escribimos en memoria 
break;
 // 2. Leer una posicion de memoria del M24C01 
case 2: 
volver3: 
Serial.print("?> Introduzca una posicion de memoria, es decir, un numero entre 0 y 127 "?;
 while (Serial.available() == 0);
 // Esperamos a que se teclee un dato 
direccion = SerialRead();
 // Guardamos el dato 
Serial.println("?osicion introducida: "?;
 Serial.println(direccion);
 Serial.println("?n"?;
 // Si no est? entre 0 y 128 se vuelve a pedir posicion 
if (direccion < 0 || direccion > 127) { Serial.println("?!? POSICION DE MEMORIA ERRONEA\n"?;
 goto volver3;
 }
 clean();
 Serial.println(RANDOM_ADDRESS_READ(direccion));
 //Leemos de memoria 
break;
 // 3. Inicializar toda la memoria del M24C01 a un valor 
case 3: volver4: Serial.print("?> Introduzca un dato, es decir, un numero entre 0 y 255: "?;
 while (Serial.available() == 0);
 // Esperamos a que se teclee un dato 
dato = SerialRead();
 // Guardamos el dato 
Serial.print("?ato introducido: "?;
 Serial.println(dato);
 // Si no est? entre 0 y 255 se vuelve a pedir dato 
if (dato < 0 || dato > 255) { Serial.println("?!] NUMERO INCORRECTO\n"?;
 goto volver4;
 }
 clean();
 fillAllByte(dato);
 // Llenamos toda la memoria 
break;
 // 4. Mostrar el contenido de los 128 bytes del M24C01 
case 4: 
r eadal);
 break;
 // 5. Inicializar toda la memoria del M24C01 a un valor (Page Write) 
case 5: 
volver5: 
Serial.print("?> Introduzca un dato, es decir, un numero entre 0 y 255: "?;
 while (Serial.available() == 0);
 dato = SerialRead();
 Serial.print("?ato introducido: "?;

Serial.println(dato);
 // Si no est? entre 0 y 255 se vuelve a pedir dato 
if (dato < 0 || dato > 255) { 
Serial.print("?!] NUMERO INCORRECTO\n"?;
 goto volver5;
 }
 clean();
 fillAllPage(dato);
 // Llenamos toda la memoria 
break;
 // 6. Mostrar el contenido de los 128 bytes del M24C01 (Sequential Read)
 case 6: 
// Enviamos la posici?n 0 para leer toda la memoria SEQUENTIAL_RANDOM_READ(0);
 Serial.print("?n"?;
 break;
 }
 }
